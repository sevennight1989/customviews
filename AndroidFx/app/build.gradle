//import com.hearing.plugin.PluginImpl

import com.hearing.plugin.Api
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: PluginImpl
apply plugin: 'com.hearing.plugin'
def commonPackage = "com.android.custview"
def pubPackage = "com.android.custview.pub"
android {
    def api = new Api()
//    print('api name =' + api.name)
//    print('api url = ' + api.url)
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
    }

    dataBinding {
        enabled = true
    }

    buildTypes {

        debug {
            minifyEnabled false
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField("String",
                    "MIN_HU_VERSION",
                    System.getenv("MIN_HU_VERSION")
                            ? ('"' + System.getenv("MIN_HU_VERSION") + '"')
                            : '"0"'
            )
            buildConfigField("String",
                    "MAX_HU_VERSION",
                    System.getenv("MAX_HU_VERSION")
                            ? ('"' + System.getenv("MAX_HU_VERSION") + '"')
                            : '"9999"'
            )
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField("String",
                    "MIN_HU_VERSION",
                    System.getenv("MIN_HU_VERSION")
                            ? ('"' + System.getenv("MIN_HU_VERSION") + '"')
                            : '"0"'
            )
            buildConfigField("String",
                    "MAX_HU_VERSION",
                    System.getenv("MAX_HU_VERSION")
                            ? ('"' + System.getenv("MAX_HU_VERSION") + '"')
                            : '"9999"'
            )
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
//        preDexLibraries = false
        additionalParameters = ['--core-library']
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    packagingOptions {
        exclude 'META-INF/spring.handlers'
        exclude 'META-INF/spring.schemas'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/proguard/coroutines.pro'
        exclude 'META-INF/ASL2.0'

        doNotStrip "*/*/libdjivideo.so"
        doNotStrip "*/*/libSDKRelativeJNI.so"
        doNotStrip "*/*/libFlyForbid.so"
        doNotStrip "*/*/libduml_vision_bokeh.so"
        doNotStrip "*/*/libyuv2.so"
        doNotStrip "*/*/libGroudStation.so"
        doNotStrip "*/*/libFRCorkscrew.so"
        doNotStrip "*/*/libUpgradeVerify.so"
        doNotStrip "*/*/libFR.so"
        doNotStrip "*/*/libDJIFlySafeCore.so"
        doNotStrip "*/*/libdjifs_jni.so"
        doNotStrip "*/*/libsfjni.so"
        doNotStrip "*/*/libDJICommonJNI.so"
        doNotStrip "*/*/libDJICSDKCommon.so"
        doNotStrip "*/*/libDJIUpgradeCore.so"
        doNotStrip "*/*/libDJIUpgradeJNI.so"
        exclude 'META-INF/rxjava.properties'

        // pickFirsts:当出现重复文件，会使用第一个匹配的文件打包进入apk
//        pickFirst "lib/*/libBDSpeechDecoder_V1.so"
//        pickFirst "lib/*/libbd_etts.so"
//        pickFirst "lib/*/libgnustl_shared.so"
//        pickFirst "lib/*/libiconv.so"
        pickFirst "lib/*/libindoor.so"
        pickFirst "lib/*/liblocSDK7b.so"
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

/*    //保证support库使用26.1.0
    configurations.all {
        //循环一个个的依赖库
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            //获取当前循环到的依赖库
            def requested = details.requested
            //如果这个依赖库群组的名字是com.android.support
            if (requested.group == 'com.android.support') {
                //且其名字不是以multidex开头的
                if (!requested.name.startsWith("multidex")) {
                    //这里指定需要统一的依赖版本
                    details.useVersion "26.1.0"
                }
            }
        }
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }*/


    flavorDimensions "vehicle"
    productFlavors {
        common {
            manifestPlaceholders = [channel: "common", appName: "CommonTest"]
            buildConfigField "String", "appName", "\"CommonTest\""
            applicationId commonPackage
            versionCode rootProject.ext.versionCode
            versionName rootProject.ext.versionName
            dimension "vehicle"
        }
        pub {
            manifestPlaceholders = [channel: "pub", appName: "PubTest"]
            buildConfigField "String", "appName", "\"PubTest\""
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta"
            applicationId pubPackage
            versionCode rootProject.ext.versionCode
            versionName rootProject.ext.versionName
            dimension "vehicle"
        }
    }
}


configurations {
    commonCompile
    pubCompile
}
android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "../custview_release_" + rootProject.ext.versionName + "_" + getDate() + ".apk"
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //    implementation "com.android.support:recyclerview-v7:$support_version"

    //    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    rootProject.ext.dependencies.constraintlayout

    //    implementation "android.arch.work:work-runtime:2.3.0-alpha01"

    //    implementation "android.arch.work:work-firebase:1.0.0-alpha09"
    implementation "androidx.work:work-rxjava2:$work_version"
    implementation "androidx.work:work-gcm:$work_version"
    implementation "com.blankj:utilcode:$utilcode_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "org.reactivestreams:reactive-streams:$reactive_stream"
    implementation("com.squareup.retrofit2:converter-simplexml:$retrofit2_simplexml") {
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
        exclude group: 'xpp3', module: 'xpp3'
    }
    implementation "com.google.code.gson:gson:${gson_version}"
    implementation "io.reactivex.rxjava2:rxjava:${rxjava_version}"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'

    implementation "androidx.work:work-runtime:2.2.0"
    //Gson converter
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'

    //RxJava2 Adapter
    implementation 'com.squareup.retrofit2:converter-scalars:2.0.0'
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$retrofit2_adapter_version"

    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation "com.squareup.okio:okio:$squareup_okio_version"

    //    implementation ("com.android.support:design:27.1.1") { changing = true}
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.navigation:navigation-fragment:2.1.0'
    implementation 'androidx.navigation:navigation-ui:2.1.0'
    implementation 'androidx.navigation:navigation-runtime:2.1.0'
    def lifecycle_version = "2.1.0"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.room:room-runtime:2.2.3"
    implementation "androidx.room:room-common:2.2.3"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    annotationProcessor "androidx.room:room-compiler:2.2.3"

    implementation "androidx.paging:paging-runtime:2.1.1"
    implementation "androidx.paging:paging-common:2.1.1"

    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"

    // For Kotlin use lifecycle-viewmodel-ktx

    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"

    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI

    //     AndroidX libraries use this lightweight import for Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // For Kotlin use kapt instead of annotationProcessor

    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"


    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"


    def camerax_version = "1.0.0-beta12"
    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // If you want to additionally use the CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha19"
    // If you want to additionally use the CameraX Extensions library
    implementation "androidx.camera:camera-extensions:1.0.0-alpha19"

    pubImplementation rootProject.ext.dependencies.PubLibs
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha01'

    implementation 'androidx.activity:activity:1.2.0-beta01'
    implementation 'androidx.fragment:fragment:1.3.0-beta01'
    implementation  'com.google.android:flexbox:1.0.0'
    implementation project(path: ':base')

}
